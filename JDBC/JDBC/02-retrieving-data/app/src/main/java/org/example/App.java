/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.sql.DataSource;

import com.mysql.cj.jdbc.MysqlDataSource;

public class App {

    public static DataSource createDataSource() {
        String dbUrl = "jdbc:mysql://localhost:3306/users";
        String dbUser = "yoav";
        String dbPassword = "yoav";

        MysqlDataSource mysqlDS = null;
        
        mysqlDS = new MysqlDataSource();
        mysqlDS.setURL(dbUrl);
        mysqlDS.setUser(dbUser);
        mysqlDS.setPassword(dbPassword);

        return mysqlDS;
        
    }

    public static void main(String[] args)  {
        try(Connection conn = createDataSource().getConnection()) {


            // we want to create statement in a try clause because we need to release it after using it.
            try(Statement stmt = conn.createStatement()) {
                ResultSet rs = stmt.executeQuery("select * from users");
                while(rs.next()) {
                    // we can get columns using either indexes or column names
                    System.out.println(rs.getInt(1) + "  " + rs.getString(2));
                    System.out.println(rs.getInt("id") + " " + rs.getString("name"));
                }
            }

            try(Statement stmt = conn.createStatement()) {
                ResultSet rs = stmt.executeQuery("select id AS zehut, name AS shem from users");
                while(rs.next()) {
                    // note that if you alias the column names, and you use string in the getter methods, you need to use the alias names
                    System.out.println(rs.getInt("zehut") + " " + rs.getString("shem"));
                }
            }
            System.out.println("===========");
            
            // creating a statement as TYPE_SCROLL_INSENSITIVE or TYPE_SCROLL_SENSITIVE allows you to scroll back in the resultset
            try(Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY)) {
                ResultSet rs = stmt.executeQuery("select * from users");
                rs.next();    // note that if you alias the column names, and you use string in the getter methods, you need to use the alias names
                System.out.println(rs.getInt("id") + " " + rs.getString("name"));
                
                rs.next();
                System.out.println(rs.getInt("id") + " " + rs.getString("name"));
                
                rs.previous();
                System.out.println(rs.getInt("id") + " " + rs.getString("name"));
            }
            
            
            System.out.println("===========");
            // creating a statment as CONCUR_UPDATABLE allows you to update rows using the ResultSet object:
            try(Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE)) {
                ResultSet rs = stmt.executeQuery("select * from users");
                
                while(rs.next()) {
                    String name = rs.getString("name");
                    name += " Klein";
                    rs.updateString("name", name);
                    rs.updateRow();
                    System.out.println(rs.getInt("id") + " " + rs.getString("name"));
                }    // note that if you alias the column names, and you use string in the getter methods, you need to use the alias names
                
            }
            




        } catch(SQLException e) {
            System.out.println("SQL Exception!");
            System.out.println(e);
        }
    }
}
