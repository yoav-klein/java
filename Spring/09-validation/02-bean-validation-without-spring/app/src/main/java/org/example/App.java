/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.lang.reflect.Method;
import java.util.Set;

import jakarta.validation.ConstraintViolation;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.ValidatorFactory;
import jakarta.validation.executable.ExecutableValidator;

public class App {

    public static void main(String[] args) {
        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();

        /*** Bean validation of class properties */

        User user = new User();
        user.setWorking(true);
        user.setAboutMe("Its all about me!");
        user.setAge(50);

        Set<ConstraintViolation<User>> violations = validator.validate(user);

        System.out.println("Violations for the User object");
        for (ConstraintViolation<User> violation : violations) {
            System.out.println(violation.getMessage());
        }


        /*** Bean validation - method validation */
        ExecutableValidator executableValidator = factory.getValidator().forExecutables();
        HotelRoom object = new HotelRoom();
        
        Method method = null;
        try {
            method = HotelRoom.class.getMethod("createReservation", int.class, User.class);
        } catch(Exception e) {}
        
        Object[] parameterValues = { 0, new User() };
        
        Set<ConstraintViolation<HotelRoom>> violations1
        = executableValidator.validateParameters(object, method, parameterValues);

        System.out.println("Violations for the createReservation method");
        for (ConstraintViolation<HotelRoom> violation : violations1) {
            System.out.println(violation.getMessage());
        }
    }
}
