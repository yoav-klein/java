/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package my.spring;
import org.springframework.validation.DataBinder;
import org.springframework.validation.BindingResult;
import org.springframework.beans.MutablePropertyValues;
import java.util.HashMap;
import java.util.Map;


import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.validation.Validator;
import org.springframework.validation.SimpleErrors;
import org.springframework.validation.annotation.Validated;
//import jakarta.validation.Validator;
import jakarta.validation.ConstraintViolation;


public class App {

    // Java Bean Validation
    // error validation of @Min will be registered with the code Min
    public static void javaBeans() {
        ApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);
        Validator validator = (Validator)context.getBean("validator");

        // Create a new instance of the Person class
        Person person = new Person();

        // Create a DataBinder for the Person object
        DataBinder dataBinder = new DataBinder(person);
        
        // Create a map with property values to bind
        Map<String, Object> propertyValues = new HashMap<>();
        propertyValues.put("name", "John Doe");
        propertyValues.put("age", "-5");

        dataBinder.addValidators(validator);

        dataBinder.bind(new MutablePropertyValues(propertyValues));
        dataBinder.validate();
        // Bind the map values to the person object

        BindingResult result = dataBinder.getBindingResult();
        if(result.hasErrors()) {
            result.getAllErrors().forEach(error -> {
                System.out.println("==== error toString");
                System.out.println(error.toString());
                System.out.println("==== error codes");
                
                for(String code : error.getCodes()) {
                    System.out.println(code);
                }
                
            });
        } else {
            System.out.println("No validation errors!");
        }

    }

    // Spring Validator
    // you specify the error codes using the reject methods
    public static void springValidator() {
        
       // Create a new instance of the Person class
       Person person = new Person();

       // Create a DataBinder for the Person object
       DataBinder dataBinder = new DataBinder(person);
       
       // Create a map with property values to bind
       Map<String, Object> propertyValues = new HashMap<>();
       propertyValues.put("name", "John Doe");
       propertyValues.put("age", "-5");

       dataBinder.addValidators(new PersonValidator());

       dataBinder.bind(new MutablePropertyValues(propertyValues));
       dataBinder.validate();
       // Bind the map values to the person object

       BindingResult result = dataBinder.getBindingResult();
       if(result.hasErrors()) {
           result.getAllErrors().forEach(error -> {
               System.out.println("==== error toString");
               System.out.println(error.toString());
               System.out.println("==== error codes");
               
               for(String code : error.getCodes()) {
                   System.out.println(code);
               }
               
           });
           
       } else {
            System.out.println("No validation errors!");
       }
    }
    public static void main(String[] args) {
        // javaBeans();
        springValidator();
    }
}
