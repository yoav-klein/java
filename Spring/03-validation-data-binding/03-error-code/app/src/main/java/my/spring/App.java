/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package my.spring;


import java.util.Set;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.validation.Validator;
import org.springframework.validation.SimpleErrors;
import org.springframework.validation.annotation.Validated;
//import jakarta.validation.Validator;
import jakarta.validation.ConstraintViolation;


import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;



@Validated
public class App {
    
    // Java Bean Validation
    // error validation of @Min will be registered with the code Min
    public static void javaBeans() {
        ApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);
        Validator validator = (Validator)context.getBean("validator");
        
        Person yoav = new Person();
        yoav.setAge(-3);
        yoav.setName("Y");        
        
        SimpleErrors errors = new SimpleErrors(yoav);
        validator.validate(yoav, errors);
        
        if (errors.hasErrors()) {
            // Print out the errors
            errors.getAllErrors().forEach(error -> {
                System.out.println("==== error toString");
                System.out.println(error.toString());
                System.out.println("==== error codes");
                
                for(String code : error.getCodes()) {
                    System.out.println(code);
                }
                
            });
        } else {
            System.out.println("Form is valid.");
        }
    }

    // Spring Validator
    // you specify the error codes using the reject methods
    public static void springValidator() {
        
        PersonValidator validator = new PersonValidator();
        Person yoav = new Person();
        yoav.setAge(-2);

        SimpleErrors errors = new SimpleErrors(yoav);
        validator.validate(yoav, errors);

        if (errors.hasErrors()) {
            // Print out the errors
            errors.getAllErrors().forEach(error -> {
                System.out.println("==== error toString");
                System.out.println(error.toString());
                System.out.println("==== error codes");
                
                for(String code : error.getCodes()) {
                    System.out.println(code);
                }
                
            });
        } else {
            System.out.println("Form is valid.");
        }
    }
    

    public static void main(String[] args) {
        springValidator();
        System.out.println("===============");
        javaBeans();
    }
        
}
