/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.example.web.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.parameters.P;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.example.business.exception.UserAlreadyInTenantException;
import com.example.business.exception.UserNotExistsException;
import com.example.business.service.TenantService;
import com.example.business.service.UserService;
import com.example.helpers.Constants;

import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletResponse;

@Controller
@RequestMapping("/tenants")
public class TenantController {
    @Autowired
    TenantService tenantService;

    @Autowired
    UserService userService;

    @ModelAttribute("user")
    public void addUserToModel(Model model, @AuthenticationPrincipal Object user) {
        OAuth2User oauth2User = (OAuth2User)user;
        model.addAttribute("user", userService.getUserById(oauth2User.getAttribute("sub")).get());
    }

    // create tenant
    @PostMapping
    public String createTenant(@AuthenticationPrincipal Object user, @RequestParam("name") String tenantName) {
        OAuth2User oauth2User = (OAuth2User)user;
        String userId = oauth2User.getAttribute("sub");
        tenantService.createTenant(tenantName, userId);

        return "redirect:/my-tenants";
    }
    
    // delete tenant
    @DeleteMapping("/{id}")
    public String deleteTenant(Model model, @PathVariable("id") String tenantId) {
        tenantService.deleteTenant(tenantId);

        return "redirect:/";
    }

    // tenant management page
    @GetMapping("/{id}")
    @PreAuthorize("@authz.isUserPartOfTenant(authentication, #tenantId)")
    public String manageTenant(@AuthenticationPrincipal Object user, Model model, @PathVariable("id") @P("tenantId") String tenantId) {
        model.addAttribute("tenant", tenantService.getTenantById(tenantId));
        model.addAttribute("invitations", tenantService.getAllInvitationsForTenant(tenantId));
        
        return "tenant-management";
    }
    
    // connect to tenant
    @GetMapping("/{id}/connect")
    @PreAuthorize("@authz.isUserPartOfTenant(authentication, #tenantId)")
    public String connectToTenant(@AuthenticationPrincipal Object user, 
        @PathVariable("id") @P("tenantId") String tenantId, 
        HttpServletResponse response) {
        
        OAuth2User oauth2User = (OAuth2User)user;
        String userId = oauth2User.getAttribute("sub");

        if (tenantService.isUserPartOfTenant(userId, tenantId)) {
            System.out.println("SETTING COOKIE");
            Cookie tenantCookie = new Cookie(Constants.TENANT_COOKIE_NAME, tenantId);
            tenantCookie.setPath("/");
            response.addCookie(tenantCookie);
        } else {
            System.out.println("NOT GOOD");
            // return 403
        }

        return "redirect:/home";
    }  

    // invite user to tenant
    @PostMapping("/{id}/invitations")
    public String inviteUser(Model model, @PathVariable("id") String tenantId, @RequestParam("email") String userEmail) 
        throws UserNotExistsException, UserAlreadyInTenantException {
        tenantService.inviteUser(tenantId, userEmail);
        model.addAttribute("tenant", tenantService.getTenantById(tenantId));

        return String.format("redirect:/tenants/%s", tenantId);
    }

    // remove user
    @DeleteMapping("/{id}/members/{userId}")
    public String removeMember(Model model, @PathVariable("id") String tenantId, @PathVariable("userId") String userId) {
        tenantService.removeUserFromTenant(tenantId, userId);

        return String.format("redirect:/tenants/%s", tenantId);
    }

    // leave tenant
    @DeleteMapping("/{id}/members/{user}/leave")
    public String leaveTenant(Model model, @PathVariable("id") String tenantId, @PathVariable("user") String userId) {
        tenantService.removeUserFromTenant(tenantId, userId);

        return "redirect:/my-tenants";
    }

    // ExceptionHandlerExceptionResolver
    @ExceptionHandler
    public String noSuchUserHandler(UserNotExistsException e) {
        return "user-not-exists";

    }

    @ExceptionHandler
    public String userAlreadyInTenantHandler(UserAlreadyInTenantException e) {
        return "user-already-in-tenant";

    }
   
}