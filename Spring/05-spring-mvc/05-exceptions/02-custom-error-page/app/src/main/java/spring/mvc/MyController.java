/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package spring.mvc;

import java.io.IOException;
import java.util.Map;
import java.util.HashMap;

import jakarta.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@Controller
public class MyController {

    /* throwing an exception and not handling it will result in 500
     * therefore, it will be served by our handler method error500
     */
    @RequestMapping("/exception")
    public String sayHello(Model model) throws IOException {
        
        if(1 == 1) { throw new IOException("Wy wy..."); }

        return "hellopage"; // This corresponds to the view name
    }


    // for some reason, although this returns a 404, our custom page is not shown..
    @RequestMapping("/notfound")
    public ResponseEntity<String> notFound() {
        
        return new ResponseEntity<String>("Not found!", HttpStatus.NOT_FOUND); // This corresponds to the view name
    }

    // throwing a CustomException will dispatch to the /customException endpoint
    @RequestMapping("/myException") 
    public String myException() throws CustomException {
        if(1 == 1) { throw new CustomException(); }

        return "hellopage"; // This corresponds to the view name
    }

    // endpoint for custom page for 400
    @RequestMapping("/error400")
    public String error400() {
        return "error400";
    }

    // endpoint for error 404
    @RequestMapping("/error404")
    public String error404() {
        return "error404";
    }

    // endpoint for error 500
    // you can get information about the error using the attributes of the HttpServletRequest
    @RequestMapping("/error500") 
    public String error500(Model model, HttpServletRequest request) {
    
        model.addAttribute("statusCode", request.getAttribute("jakarta.servlet.error.status_code"));
        model.addAttribute("exception", request.getAttribute("jakarta.servlet.error.exception"));
        model.addAttribute("message", request.getAttribute("jakarta.servlet.error.message"));
        model.addAttribute("requestUri", request.getAttribute("jakarta.servlet.error.request_uri"));

        return "error500";
    }

    // endpoing for the CustomException exception
    @RequestMapping("customException")
    public String errorCustom() {
        return "customException";
    }

    // endpoing for general errors
    @RequestMapping("/generalError") 
    public String general() {
        return "generalError";
    }
}