/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import com.sun.net.httpserver.HttpServer;
import io.micrometer.core.instrument.Counter;
import io.micrometer.core.instrument.Timer;
import io.micrometer.prometheusmetrics.PrometheusConfig;
import io.micrometer.prometheusmetrics.PrometheusMeterRegistry;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

public class App {
  public static void main(String[] args) throws IOException {
    // Micrometer registry that renders Prometheus text format
    PrometheusMeterRegistry registry = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT);

    // A couple of minimal metrics
    Counter requests = Counter.builder("demo_requests_total")
        .description("Total /ping requests")
        .register(registry);

    Timer latency = Timer.builder("demo_request_latency_seconds")
        .description("Latency for /ping")
        .publishPercentileHistogram()
        .register(registry);

    AtomicInteger inFlight = registry.gauge("demo_inflight_requests", new AtomicInteger(0));

    // Tiny HTTP server with two endpoints: /ping and /metrics
    HttpServer server = HttpServer.create(new InetSocketAddress(8080), 0);

    server.createContext("/ping", exchange -> {
      inFlight.incrementAndGet();
      long start = System.nanoTime();
      try {
        requests.increment();
        byte[] body = "pong\n".getBytes(StandardCharsets.UTF_8);
        exchange.sendResponseHeaders(200, body.length);
        exchange.getResponseBody().write(body);
      } finally {
        latency.record(System.nanoTime() - start, TimeUnit.NANOSECONDS);
        inFlight.decrementAndGet();
        exchange.close();
      }
    });

    server.createContext("/metrics", exchange -> {
      // Render Micrometer metrics in Prometheus plaintext format
      String scrape = registry.scrape();
      byte[] body = scrape.getBytes(StandardCharsets.UTF_8);
      exchange.getResponseHeaders().add("Content-Type", "text/plain; version=0.0.4; charset=utf-8");
      exchange.sendResponseHeaders(200, body.length);
      exchange.getResponseBody().write(body);
      exchange.close();
    });

    server.start();
    System.out.println("Up! /ping and /metrics on http://localhost:8080");
  }
}